#!/usr/bin/env node

// 命令行界面
const program = require('commander')
// 装饰输出
const chalk = require('chalk')
// 命令行对应输出显示图标
const ora = require('ora')
// 下载对应模板
const download = require('download-git-repo')
// 读取模版名称
const tplObj = require(`${__dirname}/../template`)
// 路径模块
const path = require('path')
// 使用子进程进行install
const exec = require('child_process').exec
const process = require('process')


program
  .usage('<template-name> [project-name]')
program.parse(process.argv)
// 当没有输入参数的时候提示
if (program.args.length < 1) return program.help()

/**
 * @params=program.args[0] type=String description=模板名称
 * @params=program.args[1] type=String description=项目名称 
 */
let templateName = program.args[0]
let projectName = program.args[1]
// 校验参数
if (!tplObj[templateName]) {
  console.log(chalk.red('\n Template does not exit! \n '))
  return
}
if (!projectName) {
  console.log(chalk.red('\n Project should not be empty! \n '))
  return
}

url = tplObj[templateName]

console.log(chalk.white('\n Start generating... \n'))
// 出现加载图标
const spinner = ora("Downloading...");
spinner.start();
// 执行下载方法并传入参数
download (
  url,
  projectName,
  err => {
    if (err) {
      spinner.fail();
      console.log(chalk.red(`Generation failed. ${err}`))
      return
    }
    // 结束加载图标
    spinner.succeed();
    console.log(chalk.green('\n Generation completed!'))
    console.log('\n To get started')
    console.log(`\n    cd ${projectName} \n`)
    const icon = ora('auto npm install... ')
    icon.start()
    const home = process.cwd()
    console.log('process', process.cwd())
    const projectPath = path.join(home, projectName)
    if (!projectName.length)  return
    exec('npm install', {cwd: projectPath}, (error, stdout, stderr) => {
      console.log(process.cwd())
      if (error) {
        console.log(`执行错误 ${error}`)
        icon.fail()
        return
      }
      console.log(`stdout: ${stdout}`)
      console.log(`stderr: ${stderr}`)
      icon.succeed()
    })
  }
)
